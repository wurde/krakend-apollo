import { ApolloServer, gql } from 'apollo-server-express';
import express from 'express';

const port = 4000;
const serverPath = "/graph";
const hasIntrospection = process.env.NODE_ENV == "production" ? false : true

// A schema is a collection of type definitions (hence "typeDefs")
// that together define the "shape" of queries that are executed against
// your data.
const typeDefs = gql`
  # Comments in GraphQL strings (such as this one) start with the hash (#) symbol.

  # This "Book" type defines the queryable fields for every book in our data source.
  type Book {
    title: String
    author: String
  }

  # The "Query" type is special: it lists all of the available queries that
  # clients can execute, along with the return type for each. In this
  # case, the "books" query returns an array of zero or more Books (defined above).
  type Query {
    books: [Book]
  }
`;

const books = [
  {
    title: 'Dune',
    author: 'Frank Herbert',
  },
  {
    title: "The Hitchhiker's Guide to the Galaxy",
    author: 'Douglas Adams',
  },
];

// Define functions that are responsible for populating
// the data for fields in your schema.
const resolvers = {
  Query: {
    books: () => books,
  },
};

async function startApolloServer(typeDefs, resolvers) {
  // Creates an Express application.
  // https://expressjs.com
  const app = express();

  // Initialize an ApolloServer instance. The constructor
  // requires a schema definition and set of resolvers.
  const server = new ApolloServer({
    // Document that represents the GraphQL schema,
    // generated by applying the gql tag to a valid
    // Schema Definition Language (SDL) string.
    typeDefs,
    // A map of functions that populate data for
    // individual schema fields.
    resolvers,
    introspection: hasIntrospection,
    path: serverPath
  });

  // Prepare to handle incoming operations. Always call
  // this before calling server.applyMiddleware.
  await server.start();

  // Mount Apollo middleware here.
  server.applyMiddleware({ app, path: '/graph' });

  // The `listen` method launches a web server.
  app.listen(port, () => {
    console.log(`ðŸš€  Server ready at http://localhost:${port}`);
  })
}

startApolloServer(typeDefs, resolvers);
